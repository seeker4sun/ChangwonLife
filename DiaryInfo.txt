ARS 시스템
112.1.2.198:13389 Web
112.1.2.70:13389 DB
ltarsadm/ !krsys9월1일

가상Was 112.1.2.111 jeus5
gbankingwas / Gbswas!202205
가상DB  112.1.2.112 MS-SQL 2008
gbankingdb / Gbsdb!202205
MSSQL2008
sa / wlqkbtp
rtcs / wlqkbtp 지방세
recs / wlqkbtp 세외수입
가상Web
gbankingweb / Gbsweb!202205
-----------------------------------------------------------
경남은행 체크카드 / 어머니

농협인증서
GPKI 인증서
치약, 칫솔
모기채
파리채
부채- 자동차, 책생
책상밑 난로
웸베이비 히팅 패드
게르마늄 찜질기 -황토박사
무선무드등 듀얼가습기
-----------------------------------------------------------
Wetax 자동차세 납부
자동차세 연납분 : 신고분, 정기분

연납: 1년치 한꺼번에 9.1% 할인
신고분이라 자동이체 안됨
안내고 있으면 정기분에서 부과되고 자동이체됨

현재 자동이체되는 세 : 주민세, 재산세, 등록면허세, 자동차세
-----------------------------------------------------------
성산아트홀 시설무대부 송미석 268-7944
-----------------------------------------------------------
지방세정보시스템운영관리홈페이지
seeker4sun / 박광제!~
-----------------------------------------------------------
2022년 독서통신
2023년 독서통신
http://changwon.njedu.co.kr
seeker4sun / 박태하!xxxx
-----------------------------------------------------------
2022년 창원시 사이버교육
cw.brentphone.kr
2023년 창원시 사이버교육
https://changwon.imooc.co.kr/
seek4sun@korea.kr / 7181
-----------------------------------------------------------
재산변동신고 : peti.go.kr
-----------------------------------------------------------
신규 DBrain neodbrain.go.kr
SEEK4SUN / 도현!0703
(대소문자 유의)
-----------------------------------------------------------
마이비회원정보 seek4sun / ~!xxxx
카드2개 등록되어있음 320원, 48230원 남아있음
-----------------------------------------------------------
2023년 맞춤형 복지제도
23.1.1~12.15
http://changwon.benepia.co.kr 외부망에서도 가능
구글플레이,앱스토어 : 베네피아 앱 다운로드후 실행 앱주소: m.benepia.co.kr/m.do
seeker4sun / 박도현!xxxx

복지카드사용기한 : 23.11.23까지(이후 카드결제내역 조회 불가)

검진관련 id : S022824190475 / 박도현!xxxx

-----------------------------------------------------------
Microsoft 
seek4sun@korea.kr / 박광제!12xx

카카오통합
seek4sun@korea.kr / 박광제!12xx

네이버
seek4sun / 박광제!xxx4

Nate.com
seek4sun / 박광제!xxxx
메일함, 주소록 등 초기화됨

korea.com
seek4sun / ~er4~@
별로 재미없어 탈퇴함

구글계정
se~er4~@gmail.com / 박도현!xxxx

github.com/seeker4sun
계정 seeker4sun / 박도현!xxxx
계정 seeker4sun2/ 박도현!xxxx
-----------------------------------------------------------
경상남도인재개발원
http://gn.lms.go.kr
seeker4sun / ~r4~@
-----------------------------------------------------------
한국보건복지인재원
https://duty.kohi.or.kr
seek4sun / ~r4~@
긴급복지 신고의무자교육수강
-----------------------------------------------------------
국립통일교육원
https://www.uniedu.go.kr/ 
개명전 이름으로 되어있음
seeker4sun / seek4sun@korea.kr / 박도현!xxxx
-----------------------------------------------------------
상남동 상무초밥
거제 버드앤피쉬

장인어른 모시고 밥사기

창원사랑상품권 구매

스케일링
농협인증서
다이어리 정리
월간계획표
자동차세차
자동차 윤활유
자동차종합검사 
자동차보험 만기(6월3일), 갱신은 만기 30일전부터가능

봄맞이 옷정리
계절맞이 옷정리

다림질
수염깎기 충전
청소로봇 충전
청소로봇 걸레 세척

태블릿 필름사기

접종 예약

-----------------------------------------------------------
파티마 병원
환자번호 : 001051475
기간 2년치
진료확인서
진료비세부산정내역서
진료비 영수증

눈, 파티마안과, 약국
정형외과 : 어깨 매트로

단체보험 어디인지 앱 설치
-----------------------------------------------------------
관심방향통제력
주의력 근육
변연계에 대한 전두엽 피질의 통제력

감정에 휘둘리지 않고 목적을 지향하는 것
사소한 목적 정하기 한발 물러나

미시적 차원의 셀프 뇌수술
집중력 마나
하루에 최대로 할수 있는 포모도로 갯수

생각은 5초, 생각은 이제 그만 행동을

생각하고 정하고 행동하되
인터럽트는 적어두는 것 정도로 보류(허용)하고
즉시 행동에 옮기기

우리는 우리의 도구들을 만든다. 그러면 그 도구들이 인간을 만든다
- 존 M. 컬킨(John M. Culkin)

나는 도구를 만들것이다. 그러면 극덧이 나를 만들어나갈것이다.
그 도구는 나의 정체성이자 무기가 된다.

내가 몰입하는 대상이 곧 도구이며 그 도구가 다시 나를 만들어줄것이다.

제약은 한계가 아니라 통찰이다

심리적 탄성 Resilience

행복은 당시 경험의 결과라기보다는 몰입에 대한 훗날의 회상에 있다.

기술은 열정이 사그라들었을때 기댈수 있는 가장 기본적인 대체물이다.

Just Managable Difficulty

자신이 아닌 남들의 행복을 위해 애쓰는 것이 어째서 도덕적인가?
- 아인 랜드 Rand (작가)
도덕: 자신과 남들을 조화롭게 배려해야 행복할수 있다.
좋은 사람이 되기 위해 꼭 자기의 권리와 요구를 희생해야 하는 것은 아니다.

본짓 vs 딴짓

8:10분에는 출발 늦어도

내용이 아닌 의도에 답하기
"방금 뭐라고 하셨지요?"
'나' 대신에 '당신'을 주체로 놓았음
책임을 정통으로 상대에게 돌리게 한다.

"다시 한번 말해봐."
그 경솔한 말을 반복하도록 만드는 것은 모욕을 그냥 넘기지 않겠다는 뜻. 의사표시
치고 빠지는 언어적 공격을 하는 상대에게 설명을 요구

발언의 내용이 아닌 의도에 답변함으로써
상대의 수작을 만천하에 드러내는 것
그 상황에는 공감(나 주어)보다 권위(너,당신 주어)가 필요

"뭐가 궁금한데?"
"그런 말은 스스로 한테나 하시지요."
"선을 넘으셨네요."
"내일 아침에 답을 받으실 겁니다."
"이제 그만 하세요."
"제대로 행동하십시오."
 
"~하면되요?"
판단의 책임을 떠넘기는 말인경우,
대답 
=> 하기싫으면 안해도 되요. (화내지말고 부드럽되 단호한 어조로)
=> 내 허락받고 할거예요?

권위가 뿜어져나오는 자세

진북 : True North

진정한 생산성이란 갈망영역에 해당하는 일을 더 많이 하되
다른 모든 일을 줄이는 것이다.

제한적 믿음 vs 해방적 진실
정서적 뱀파이어 <타인의 힘>

-----------------------------------------------------------
초집중
초생산성
아주 작은 습관의 힘
더 시스템
10배의 법칙

댄 애리얼리 부의 감각
탤런트 코드
1만시간의 재발견
우리의 뇌는 어떻게 배우는가
그들이 어떻게 해내는지 나는 안다.

움직임의 힘
하버드 상위 1퍼센트의 비밀
프로페셔널 스튜던트
기적의 리미널 씽킹
상자 밖에 있는 사람 : 소통과 창조의 시대
초서 독서법
계획이 실패가 되지 않게 
인생은 실전이다
인생은 수리가 됩니다

호모 아딕투스 김병규 지음

신영준
애덤 그랜트
제임스 클리어
마크 맨슨
조너선 하이트
로리 베이든 : 시간을 2배로 늘려사는 비결

메타인지 학습법
모바일미래보고서 2021
이것이 인공지능이다
자본주의는 왜 멈추는가
당신의 생각을 정리해드립니다.

-----------------------------------------------------------
git update-git-for-windows

choco upgrade chocolatey
choco upgrade python3
choco upgrade python
choco upgrade nodejs-lts
choco upgrade git.install

rem choco 과 npm 상호 upgrade 는 불가함
rem npm upgrade(node가 이미 설치된 경우)
npm install -g npm
rem 또는
npm-windows-upgrade

npm list -g

choco -v
node  -v
npm   -v
git   -v
python -V

choco list --global
choco list --local

choco uninstall git.install
choco install notepadplusplus

del /s /q D:\*.DS_Store


-----------------------------------------------------------
npm을 이용해 package.json의 모든 package를 최신 버전으로 바꾸는 방법은 다음과 같습니다.
먼저 npm-check-updates 패키지를 전역으로 설치합니다.
npm install -g npm-check-updates
설치된 npm-check-updates 패키지를 이용하여 package.json의 모든 package를 최신 버전으로 업데이트합니다.
ncu -u
이 명령어를 실행하면 package.json 파일의 모든 의존성이 최신 버전으로 업데이트됩니다.

package.json 파일을 업데이트합니다.
npm update
이 명령어를 실행하면 package.json 파일에 업데이트된 의존성 정보가 적용됩니다.

위의 명령어를 순서대로 실행하면 package.json 파일의 모든 package가 최신 버전으로 업데이트됩니다.
단, 모든 package가 호환되는 최신 버전으로 업데이트되지는 않을 수 있으므로,
업데이트 후에는 기능 테스트를 수행하는 것이 좋습니다.
-----------------------------------------------------------
@angular/material 패키지의 최신 버전을 알아내는 방법은 다음과 같습니다.
npm 명령어를 사용하여 @angular/material의 최신 버전을 검색합니다.
npm view @angular/material version
npm outdated 명령어를 사용하여 현재 프로젝트에서 사용 중인 @angular/material의 버전과
최신 버전을 비교할 수도 있습니다.
npm outdated @angular/material
이 명령어는 현재 프로젝트에서 사용 중인 패키지와 최신 버전을 비교해줍니다.
@angular/material 패키지가 업데이트되었다면, 최신 버전 정보가 표시됩니다.
-----------------------------------------------------------

 get(url: string,
  options: { headers?: HttpHeaders | { [header: string]: string | string[]; };
   context?: HttpContext;
    observe?: "body" | "events" | "response";
    params?: HttpParams | { ...; };
    reportProgress?: boolean;
     responseType?: "arraybuffer" | ... 2 more ... | "json";
      withCredentials?: boolean; } = {}): Observable<any>
-----------------------------------------------------------      

display:inline-block은 가로로 배치하면서도 기본 마진과 패딩을 가지고 있지만,
float:left;로 배치하면 가로로 배치될때 요소에 기본 마진과 패딩이 없습니다.
그래서 필요하다면 요소마다 마진과 패딩을 지정해야 합니다. 그리고 float:left를
사용하면 clear 속성으로 floating을 해제해야 합니다.

수평내비게이션 만들기
nav ul { list-style: none;}
nav ul li { 
  display:inline-block;
  padding: 20px; margin: 0 20px; border: 1px solid black;
}
display: inline-block은 li에 지정해야함. inline 은 width 지정불가.
지정해봐야 무시됨. inline-block은 inline 처럼 필요한만큼 가로공간을
차지하면서도 block 처럼 width 지정할수 있음. 그래서 가로로 연이어
나열하면서도 width,padding,margin 적용가능함
-----------------------------------------------------------
element::after {
  content: "새로운 내용 추가";
  /* 스타일을 지정합니다. */
}
이 때 element는 ::after 선택자가 적용될 요소를 나타내며,
content 속성은 해당 요소의 끝 부분에 추가될 새로운 콘텐츠를 지정합니다.
따라서 content 속성으로 명시되는 문자열은 해당 요소의 child가 아니라,
::after 선택자가 적용된 요소의 일부분인 가상의 콘텐츠입니다.
이러한 가상의 콘텐츠는 일반적인 요소처럼 스타일링이 가능합니다.

-----------------------------------------------------------
JSP 스크립트릿에서 HTML 코드 출력을 JspWriter가 아닌 다른 Writer로 재지정할
수 있습니다. 이를 위해서는 out 객체를 다른 Writer 객체로 대체해야 합니다.

아래는 out 객체를 StringWriter로 대체하는 예제입니다.
<%
int X = 1;
%>
<p>X before Push : <%=X%></p>
<% 
    StringWriter sw = new StringWriter();
    /*JspWriter*/
    out = pageContext.pushBody(sw);  // 원래 out 을 덮어쓴다
    X++;
%>
<!-- HTML 코드 작성 -->
<p>X After Push  : <%=X%></p>
<%
    out = pageContext.popBody();
    X++;
    String output = sw.toString();
    sw.close();
%>
<p>X After Pop   : <%=X%></p>
<%=output%>

위의 예제에서는 StringWriter를 생성하고 pushBody 메소드를 사용하여 out 객체를 대체합니다.
out 객체 대신 새로운 Writer 객체로 HTML 코드를 출력하면, sw 객체에 출력 결과가 저장됩니다.
마지막으로 popBody 메소드를 사용하여 out 객체를 다시 원래대로 복원하고, sw 객체의 출력 내용을
String으로 변환하여 output 변수에 할당합니다.

이렇게 out 객체를 다른 Writer 객체로 대체하여 HTML 코드 출력을 조작할 수 있습니다.

-----------------------------------------------------------
pageContext.pushBody()와 pageContext.popBody() 에 대하여 설명부탁

pageContext.pushBody()와 pageContext.popBody()는 JSP 페이지에서

사용할 수 있는 내장 객체인 pageContext의 메소드입니다.

pushBody() 메소드는 현재 JSP 페이지의 출력 버퍼를 스택에 저장하고,

새로운 출력 버퍼를 생성합니다. 이후에 JSP 페이지에서 출력되는 내용은

새로운 출력 버퍼에 저장됩니다.

popBody() 메소드는 스택에서 저장된 출력 버퍼를 꺼내와서 현재 출력

버퍼에 추가합니다.

이후에 JSP 페이지에서 출력되는 내용은 꺼내온 출력 버퍼의 내용과 함께

현재 출력 버퍼에 추가됩니다.

이러한 메소드는 주로 JSP 페이지에서 출력 버퍼를 동적으로 제어하거나,

출력 내용을 조작해야 하는 경우에 사용됩니다.

예를 들어, JSP 페이지에서 특정 조건에 따라 출력 내용을 변경해야 하는

경우, pushBody() 메소드를 사용하여 출력 버퍼를 저장하고,

변경된 내용을 새로운 출력 버퍼에 저장한 후, popBody() 메소드를 사용하여

기존 출력 내용과 함께 출력할 수 있습니다.
-----------------------------------------------------------
CSS
container 가 position:relative; 이면서 display:flex; 이며
children 은 position:absolute; 이면서 top,right,bottom,left 속성(합쳐서 inset 속성)을
지정하지 않으면,
children 은 서로 겹쳐올려지면서 위치는 container 내에 flex 위치를 따른다.
만일 container 의 justify-content:center;이고, align-items:center; 라면
children 들은 container 내부의 정중앙에 겹쳐올려진다. z-index(숫자가 클수록 위로 올려져있음)으로
z순서를 정하면 된다.
-----------------------------------------------------------
가상 요소(::before, ::after)는 기본적으로 인라인 요소(inline element)입니다.
하지만, content 속성에 block-level 요소의 CSS 속성을 사용하면, 가상 요소도
블록 레벨 요소(block-level element)로 만들 수 있습니다. 예를 들어, 아래와 같이
content 속성에 display: block; 을 설정하면, 가상 요소가 블록 레벨 요소가 됩니다.

p::before {
  content: "";
  display: block;
  width:  100px;
  height: 100px;
  background-color: blue;
}
위 코드에서 ::before로 만들어진 가상 요소는 display 속성을 block으로 설정하여
블록 레벨 요소가 되었습니다. 따라서, 이 가상 요소는 블록 레벨 요소의 특징을 가지게 됩니다.
-----------------------------------------------------------
일반적으로, inline 요소에 width를 지정해도 무시됩니다.
이는 inline 요소는 일반적으로 컨텐츠의 크기만큼만 영역을 차지하기 때문입니다.
하지만, display: inline-block을 사용하면 inline 요소가 block 요소와 같이
동작하도록 만들 수 있으며, 이 경우 width 속성을 지정하여 요소의 너비를 조정할
수 있습니다. 또한, display: inline-flex를 사용하면 inline 요소가 flex 컨테이너와
같이 동작하도록 만들 수 있으며, 이 경우에도 width 속성을 사용하여 요소의 너비를
조정할 수 있습니다.
그러나 이러한 경우에도 inline 요소의 컨텐츠가 width보다 넓을 경우 width 속성은
무시되며, 요소의 크기는 컨텐츠에 따라 자동으로 조정됩니다.
-----------------------------------------------------------
일반적으로 inline 요소에 position: absolute를 지정하면 inline 요소는
block 요소처럼 동작하여 width 속성을 적용할 수 있습니다. 따라서 width를
지정하면 해당 너비만큼 inline 요소가 차지하게 됩니다.
하지만, position: absolute를 지정하면서 top, right, bottom, left와
같은 위치 지정 속성을 함께 사용하면 해당 inline 요소는 부모 요소의 위치에
상대적으로 위치하게 되므로, 부모 요소의 너비를 넘어서는 경우에는 너비가
줄어들거나 컨텐츠가 잘리는 문제가 발생할 수 있습니다. 따라서 width를
지정할 때는 부모 요소의 너비와 해당 inline 요소의 위치를 모두 고려하여
지정해야 합니다.
-----------------------------------------------------------
setInterval(() => { this.updateClock(); });와 
setInterval(this.updateClock);는 다른 동작을 합니다.
setInterval(() => { this.updateClock(); });는 새로운 화살표 함수를 만들고,
그 안에서 this.updateClock()를 호출합니다. 이는 this가 올바르게 컴포넌트
인스턴스를 가리키도록 보장합니다.
반면, setInterval(this.updateClock)는 this.updateClock 메소드를 직접 호출하므로,
이 경우에는 updateClock 메소드 내부에서 this가 컴포넌트 인스턴스를 가리키지 않을
수 있습니다. 이는 JavaScript에서 함수의 호출 방법에 의해 결정되기 때문입니다.
따라서 setInterval(this.updateClock)를 사용하려면, this가 올바르게 바인딩되도록
함수를 bind해주어야 합니다. 예를 들어, 다음과 같이 bind를 사용하여 this를
컴포넌트 인스턴스로 고정할 수 있습니다.

setInterval(this.updateClock.bind(this));

또는, setInterval 내부에서 화살표 함수를 사용하여 this를 올바르게 바인딩할 수도
있습니다.

setInterval(() => this.updateClock());

이렇게 하면 setInterval(this.updateClock)를 사용할 때 발생하는 this 바인딩 문제를
해결할 수 있습니다.
-----------------------------------------------------------
javascript에서 cell.addEventListener('click', handleClick, { once: true }) 와 같이
div 요소에 클릭을 한번만 할수 있도록 하는 것을 angular 에서 구현하려면

import { Component, HostListener } from '@angular/core';
@Component({
  selector: 'app-my-component',
  template: '<div (click)="handleClick()">Click me once</div>'
})
export class MyComponent {
  @HostListener('click', ['$event'], { once: true })
  handleClick(event: MouseEvent) {
    // 클릭 이벤트를 처리합니다.
  }
}
위 코드에서 @HostListener 데코레이터를 사용하여 handleClick() 메서드를
요소의 클릭 이벤트 핸들러로 등록합니다. { once: true } 옵션을 사용하여
한 번만 클릭할 수 있도록 설정합니다.
이렇게 구현하면 Angular에서도 div 요소를 한 번만 클릭할 수 있습니다.
-----------------------------------------------------------